# docker-compose.yml — BarberShop
# (sem "version" para evitar warning do Compose v2)

networks:
  traefik:
    external: true
  backend:
    external: true

services:
  ###################################
  # FRONT-END (Vite + Nginx)
  ###################################
  barbershop-front:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${DROP_API_PUBLIC_URL}
    image: ${REGISTRY:+${REGISTRY}/}barbershop-front:${TAG:-latest}
    restart: unless-stopped
    networks:
      - traefik
      - backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.barbershop-front.rule=Host(`${DROP_FRONT_HOST}`)
      - traefik.http.routers.barbershop-front.entrypoints=https
      - traefik.http.routers.barbershop-front.tls.certresolver=${CERT_RESOLVER}
      - traefik.http.services.barbershop-front.loadbalancer.server.port=80
    depends_on:
      - barbershop-api

  ###################################
  # BACK-END (Express / Node)
  ###################################
  barbershop-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${REGISTRY:+${REGISTRY}/}barbershop-api:${TAG:-latest}
    restart: unless-stopped
    environment:
      # Porta interna do app
      PORT: ${DROP_API_PORT}

      # Conexão com banco (Postgres da infra)
      DATABASE_URL: ${DATABASE_URL}

      # Configurações CORS e ambiente
      CORS_ORIGINS: ${DROP_FRONT_ORIGIN}
      NODE_ENV: production
      SEED_ON_START: true
    depends_on:
      - wait-db
    networks:
      - traefik
      - backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.barbershop-api.rule=Host(`${DROP_API_HOST}`)
      - traefik.http.routers.barbershop-api.entrypoints=https
      - traefik.http.routers.barbershop-api.tls.certresolver=${CERT_RESOLVER}
      - traefik.http.services.barbershop-api.loadbalancer.server.port=${DROP_API_PORT}

  ###################################
  # Espera pelos bancos do core
  ###################################
  wait-db:
    image: alpine:3.20
    command: >
      sh -c "
      echo '⏳ Aguardando Postgres...';
      for i in `seq 1 60`; do nc -z postgres 5432 && break || sleep 2; done;
      echo '⏳ Aguardando Mongo...';
      for i in `seq 1 60`; do nc -z mongo 27017 && break || sleep 2; done;
      echo '⏳ Aguardando MSSQL...';
      for i in `seq 1 60`; do nc -z mssql 1433 && break || sleep 2; done;
      echo '✅ Bancos disponíveis, prosseguindo!';
      "
    networks:
      - backend
